
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Multiple_Inheritance
{
    class Program
    {
        static void Main(string[] args)
        {
            Employee e1 = new Manager("Ram");
            Manager e2 = new Manager("sham", 20000, 10);
            GeneralManager e3 = new GeneralManager("Mohan", 15000, 5, "deputy GM", "Audi");
            CEO e4 = new CEO("Rohan", 25000, 6);
            e1.CalcNetSalary();
            e2.CalcNetSalary();
            e3.CalcNetSalary();
            e4.CalcNetSalary();

            e1.display();
            e2.display();
            e3.display();
            e4.display();
            Console.WriteLine();
                Console.ReadLine();
             

            
        }
    }
    //   Employee
    //  Prop
    //       string Name -> no blanks

    //   int EmpNo -> readonly, autogenerated
    //   short DeptNo -> > 0
    //abstract decimal Basic
    //  Methods
    //   abstract decimal CalcNetSalary()
    public abstract class Employee
    {
        private static int id = 0;
        public Employee(string name = "noname", short deptNo = 10, decimal basic = 10000)
        {
            id++;
            this.empNo = id;
            this.name = name;
            this.deptNo = deptNo;
            this.basic = basic;
        }
        private string name;
        public string Name
        {
            set
            {
                if (value != null)
                    name = value;
                else
                    Console.WriteLine("Invalid Name");
            }
            get
            {
                return name;
            }
        }
        private int empNo = 0;
        public int Empno
        {
            get { return empNo; }
        }
        //private static int eNo;
        //public static int Eno
        //{
        //    set
        //    {
        //        eNo = 0;
        //    }
        //    get
        //    {
        //        return eNo;

        //    }
        //}
        private short deptNo;
        public short Dno
        {
            set
            {
                if (value > 0)
                    deptNo = value;
                else
                    Console.WriteLine("invalid departno");
            }
            get
            {
                return deptNo;
            }

        }
        protected decimal basic;
        public abstract decimal Basic
        {
            set;

            get;

        }
        public virtual void display()
        {
            Console.WriteLine("Emp No "+empNo+ " Name "+name+" Dept No "+deptNo+" Basic Salary "+basic);
        }
        public abstract void CalcNetSalary();

    }


    public  class Manager : Employee
    {
        public Manager(string name = "noname", short deptNo = 10, decimal basic = 10000, string designation = "GM") : base(name, deptNo, basic)

        {
            this.designation = designation;
        }
        private string designation;
        public string DESIGNATION
        {
            set
            {
                if (value != null)
                    designation = value;
                else
                    Console.WriteLine("Invalid Designametion");
            }
            get
            {
                return designation;
            }
        }
        protected decimal basic;
        public override decimal Basic
        {
            get
            {
                return Basic;
            }
            set
            {
                if (value >= 12000 && value <= 50000)
                    Basic = value;
            }
        }
        public override void display()
        {
            // this.BASIC + "DeptNo= " + this.DEPTNO + "Designation" + this.DESIGNATION);
            // Console.WriteLine("Empno "+this.EMPNO +"name);
            Console.WriteLine("EmpNo= " + this.Empno + "name= " + this.Name + "basic= " + this.Basic + "DeptNo= " + this.Dno + "Designation" + this.DESIGNATION);

        }
        public override void CalcNetSalary()
        {
            decimal net = 2400 + 420 + this.basic - ((decimal)0.10 * this.basic);
            Console.WriteLine(net);

        }
    }
    public class GeneralManager : Manager
    {
        public GeneralManager(string name = "noname", short deptNo = 10, decimal basic = 10000, string designation = "GM", string Perks = "noperks") : base(name, deptNo, basic, designation)
        {
            this.Perks = Perks;
            //Console.WriteLine("general manager called form Genarala Mangaer");
        }
        private string Perks;
        public string PEARKS
        {
            set
            {
                if (value != null)
                    Perks = value;
                else
                    Console.WriteLine("invalid perks name");
            }
            get
            {
                return Perks;
            }
        }

       
        public override decimal Basic
        {
            get
            {
                return Basic;
            }
            set
            {
                if (value >= 12000 && value <= 50000)
                    Basic = value;
            }
        }

        public override void CalcNetSalary()
        {
            decimal net;
            net = (2500 + 1000 + this.basic - ((decimal)0.10 * this.basic));
            Console.WriteLine("from General manager" + net);
        }

        //public override void CallNetSalary()
        //{
        //    decimal net;
        //    net = (2500 + 1000 + this.basic - ((decimal)0.10 * this.basic));
        //    Console.WriteLine("from General manager" + net);

        //}
        public override void display()
        {
            // this.BASIC + "DeptNo= " + this.DEPTNO + "Designation" + this.DESIGNATION);
            Console.WriteLine("EmpNo= " + this.Empno + "name= " + this.Name + "basic= " + this.Basic + "DeptNo= " + this.Dno + "Designation" + this.DESIGNATION + "Perks "+Perks);

        }

    }

    public class CEO : Employee
    {
        public CEO(string name = "nono", short deptNo = 10, decimal basic = 10000) : base(name, deptNo, basic)
        {
        }

        public override decimal Basic { get => throw new NotImplementedException(); set => throw new NotImplementedException(); }

        
        public sealed override void CalcNetSalary()
        {
            decimal net;
            net = 2500 + 1000 + this.basic - ((decimal)0.10 * this.basic);
            Console.WriteLine("from CEO" + net);
        }
        public override void display()
        {
            // this.BASIC + "DeptNo= " + this.DEPTNO + "Designation" + this.DESIGNATION);
            Console.WriteLine("EmpNo= " + this.Empno + "name= " + this.Name + "basic= " + this.Basic);

        }

    }

}